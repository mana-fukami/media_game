
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

class TimeObservable extends Observable implements ActionListener{
  private javax.swing.Timer timer;
  private int hour,min,sec;
  private String current_time;
  TimeObservable(){
	  timer=new javax.swing.Timer(1000,this);
	  timer.start();
  }
  public void setValue() {
	  Calendar cal = Calendar.getInstance(); 
	  hour= cal.get(Calendar.HOUR_OF_DAY); 
	  min = cal.get(Calendar.MINUTE); 
	  sec = cal.get(Calendar.SECOND); 
	  current_time = String.format("%02d:%02d:%02d",hour,min,sec);
	  setChanged();
	  notifyObservers();
  }
 //-----getter-----
  public int getHour() {
	    return hour;
  }
  public int getMin() {
	  return min;
  }
  public int getSec() {
	  return sec;
  }
  public void actionPerformed(ActionEvent e) {
	  this.setValue();
  }
}

class TimeObserver extends JPanel implements Observer,ActionListener {
  private TimeObservable TimeObservable;
  private String name;
  private int lag;
  private JLabel city,time;
  public TimeObserver(TimeObservable so,String name,int lag) {
	  this.lag=lag;
	  this.name=name;
	  TimeObservable = so;
	  TimeObservable.addObserver(this);
	  this.setFont(new Font(Font.SANS_SERIF,Font.BOLD,26)); // 文字を大きくします．
	  //addActionListener(this);
  }
  public void update(Observable o,Object arg) {
	  int hour=TimeObservable.getHour();
	  int min=TimeObservable.getMin();
	  int sec=TimeObservable.getSec();
	  hour=(hour+lag+24)%24;
	  String s=String.format("%02d:%02d:%02d",hour,min,sec);
	  city.setText(name);
	  time.setText(s);
  }
  public void actionPerformed(ActionEvent e) {
	  setLayout(new GridLayout(1,2));
	  add(city);add(time);
	  TimeObservable.setValue();
  }
}

class TimeObserverFrame extends JFrame {
    public TimeObserverFrame(){
      this.setTitle("Observer Frame");
      int num=1;//出力フィールドの数
      this.setLayout(new GridLayout(num,2));
      TimeObservable s= new TimeObservable();
      TimeObserver city1=new TimeObserver(s,"Tokyo",0);
      this.add(city1);
      s.setValue();
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.pack();
      this.setVisible(true);
    }
    public static void main(String argv[]) {
      new ObserverFrame();
   }
}

